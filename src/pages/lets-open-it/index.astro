---
import BaseHead from "@/components/BaseHead.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import { getCollection } from "astro:content";
import { Icon } from "astro-icon/components";
import FormattedDate from "@/components/FormattedDate.astro";

// Define type for our collection
type LetsOpenItItem = {
  id: string;
  collection: string;
  data: {
    title: string;
    description: string;
    icon: string;
    pubDate: Date;
    category: 'models' | 'frameworks' | 'applications';
    heroImage?: string;
    tags?: string[];
    updatedDate?: Date;
  };
};

// Get content from letsOpenIt collection and sort by date
const allContent = ((await getCollection("letsOpenIt")) || [])
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Function to determine URL based on category
function getItemUrl(item: any) {
  return `/lets-open-it/${item.data.category}/${item.id}/`;
}

const bgClasses = [
  "bg-pgreen rounded-full",
  "bg-pblue rounded-2xl",
  "bg-ppink ",
  "bg-pyellow rounded-md",
];

const getRandomClass = () => {
  return bgClasses[Math.floor(Math.random() * bgClasses.length)];
};
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={`${SITE_TITLE} - Let's Open It`} description={SITE_DESCRIPTION} />
  </head>
  <body>
    <Header />
    <main class="container mx-auto md:px-10 py-12">
      <section class="flex flex-col text-left gap-8 pb-12">
        <h1 class="text-6xl font-bold">Let's Open It</h1>
        <p class="text-xl max-w-3xl">
          Let's Open AI provides powerful, transparent, and freely accessible alternatives to proprietary AI models.
          Browse our collection of open-source AI models, frameworks, and applications that you can run locally,
          customize, and trust.
        </p>
        <div class="flex gap-4 flex-wrap">
          <a href="/lets-open-it/models" class="bg-ppink px-5 py-3 border-1 border-black rounded-lg shadow-card hover:shadow-hover transition">
            <span class="font-semibold">Models</span>
          </a>
          <a href="/lets-open-it/frameworks" class="bg-pblue px-5 py-3 border-1 border-black rounded-lg shadow-card hover:shadow-hover transition">
            <span class="font-semibold">Frameworks</span>
          </a>
          <a href="/lets-open-it/applications" class="bg-pgreen px-5 py-3 border-1 border-black rounded-lg shadow-card hover:shadow-hover transition">
            <span class="font-semibold">Applications</span>
          </a>
        </div>
      </section>

      <section class="my-12">
        <h2 class="text-4xl font-bold mb-8">Recent Additions</h2>
        <ul class="flex flex-wrap justify-start gap-8">
          {
            allContent.slice(0, 6).map((item) => {
              const randomClass = getRandomClass();
              return (
                <li class="w-72 text-left rounded-3xl border-1 border-black shadow-card group hover:shadow-hover transition px-4 py-6 flex flex-col gap-6">
                  <a href={getItemUrl(item)} class="flex flex-col gap-4">
                    <div
                      class={`${randomClass} text-4xl p-2 self-start border-1 border-black shadow-card1 group-hover:shadow-card transition`}
                    >
                      <Icon name={item.data.icon} />
                    </div>
                    <h4 class="text-xl font-semibold">{item.data.title}</h4>
                    <p class="date -mt-4 text-sm font-light">
                      <FormattedDate date={item.data.pubDate} />
                    </p>
                  </a>
                  <div set:html={item.data.description} />
                </li>
              );
            })
          }
        </ul>
      </section>
    </main>
    <Footer />
  </body>
</html>
